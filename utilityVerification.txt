curl --location 'https://api.etherscan.io/api' \
--form 'module="contract"' \
--form 'action="verifysourcecode"' \
--form 'apikey="Q7TK6KS2AW6CIQPJJ2JMJR2J4VCZ9WQ2D4"' \
--form 'chainId="11155111"' \
--form 'codeformat="solidity-standard-json-input"' \
--form 'sourceCode="{\"language\":\"Solidity\",\"sources\":{\"contracts/Utility/UT5.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract UTtokenV2 is ERC20, Ownable, Pausable, ReentrancyGuard {\\n    mapping(address => bool) public blackListedAddress;\\n    mapping(address => uint256) public restrictedBalances;\\n    mapping(address => uint256) public restrictedUntil;\\n\\n    mapping(address => mapping(uint256 => StakeInfo)) public userStakes; // User -> StakeId -> StakeInfo\\n    mapping(address => uint256) public nextStakeId; // Tracks the next stake ID for each user\\n\\n    uint16 public txnTaxRateBasisPoints;\\n    address public txnTaxWallet;\\n    uint8 private _decimals;\\n    // IUniswapV2Router02 public uniswapRouter;\\n\\n    struct smartContractActions {\\n        bool canMint;\\n        bool canBurn;\\n        bool canPause;\\n        bool canBlacklist;\\n        bool canChangeOwner;\\n        bool canTxTax;\\n        bool canBuyBack;\\n        bool canStake;\\n    }\\n    struct ConditionalTokens {\\n        uint256 incentiveId;\\n        uint256 _amt;\\n        uint256 _duration;\\n        uint256 _burningTime;\\n        bool _isBurnt;\\n        // bool _isSubscribed;\\n    }\\n\\n    mapping(address => uint256) public incentiveId;\\n    mapping(address => ConditionalTokens[]) public conditionalTokens;\\n    mapping(address => uint256) public frozenTokens;\\n\\n    struct StakeInfo {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 lockUntil;\\n        uint256 startTime;\\n        bool isActive;\\n        bool isRewarded;\\n    }\\n    struct TokenRewardRate {\\n        uint8 months;\\n        uint32 rewardRate;\\n    }\\n\\n    TokenRewardRate[] public rewardRates;\\n\\n    smartContractActions public actions;\\n    event LogApproval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event TokensStaked(\\n        address indexed user,\\n        uint256 stakeId,\\n        uint256 amount,\\n        uint256 startTime,\\n        uint256 lockUntil\\n    );\\n\\n    event TokensUnstaked(\\n        address indexed user,\\n        uint256 stakeId,\\n        uint256 amount,\\n        uint256 unstakeTime\\n    );\\n\\n    event LogTotalSupply(uint256 totalSupply, uint256 decimals);\\n\\n    modifier canMintModifier() {\\n        require(\\n            actions.canMint,\\n            \\\"Minting Functionality is not enabled in this smart contract\!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canBurnModifier() {\\n        require(\\n            actions.canBurn,\\n            \\\"Burning Functionality is not enabled in this smart contract\!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canPauseModifier() {\\n        require(\\n            actions.canPause,\\n            \\\"Pause/Unpause Functionality is not enabled in this smart contract\!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canBlacklistModifier() {\\n        require(\\n            actions.canBlacklist,\\n            \\\"Blacklist Address Functionality is not enabled in this smart contract\!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canChangeOwnerModifier() {\\n        require(\\n            actions.canChangeOwner,\\n            \\\"Change Owner Functionality is not enabled in this smart contract\!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canBuyBackModifier() {\\n        require(\\n            actions.canBuyBack,\\n            \\\"Buyback Token Functionality is not enabled in this smart contract\!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canStakeModifier() {\\n        require(\\n            actions.canStake,\\n            \\\"Staking reward Functionality is not enabled in this smart contract\!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canTxTaxModifier() {\\n        require(\\n            actions.canTxTax,\\n            \\\"Txn Tax Functionality is not enabled in this smart contract\!\\\"\\n        );\\n        _;\\n    }\\n    modifier isBlackListed() {\\n        require(\!blackListedAddress[msg.sender], \\\"User is blacklisted\!\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 preMintValue,\\n        string memory _tokenTicker,\\n        string memory _tokenName,\\n        address _initialAddress,\\n        smartContractActions memory _actions,\\n        uint16 _txnTaxRateBasisPoints,\\n        address _txnTaxWallet,\\n        uint8 decimals_,\\n        TokenRewardRate[] memory _rewardRates\\n    ) ERC20(_tokenName, _tokenTicker) Ownable(_initialAddress) {\\n        _decimals = decimals_;\\n        initializeToken(preMintValue);\\n        initializeTaxSettings(_txnTaxRateBasisPoints, _txnTaxWallet);\\n        initializeFeatures(_actions);\\n        for (uint256 i = 0; i < _rewardRates.length; i++) {\\n            rewardRates.push(_rewardRates[i]);\\n        }\\n    }\\n\\n    function conditionalTokenTransfer(\\n        address _user,\\n        uint256 _amt,\\n        uint8 _months\\n    ) public {\\n        require(_amt > 0, \\\"Transfer amount must be greater than zero.\\\");\\n        require(_months > 0, \\\"Months must be greater than zero.\\\");\\n        require(_user \!= address(0), \\\"Invalid user address.\\\");\\n        require(\\n            balanceOf(msg.sender) >= _amt,\\n            \\\"Insufficient balance for transfer.\\\"\\n        );\\n\\n        ConditionalTokens[] storage tokens = conditionalTokens[_user];\\n\\n        uint256 id = incentiveId[_user];\\n\\n        ConditionalTokens memory _tokenInfo = ConditionalTokens(\\n            id,\\n            _amt,\\n            uint256(_months),\\n            block.timestamp + (_months * 30 days),\\n            false\\n        );\\n\\n        incentiveId[_user]++;\\n        tokens.push(_tokenInfo);\\n\\n        frozenTokens[_user] += _amt;\\n\\n        _transfer(msg.sender, _user, _amt);\\n    }\\n\\n    function initializeToken(uint256 preMintValue) internal {\\n        uint256 convertedValue = convertDecimals(preMintValue);\\n        _mint(address(this), convertedValue);\\n        approve(owner(), convertedValue);\\n        emit LogTotalSupply(totalSupply(), decimals());\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function setBasisPoints(uint8 percentage) public pure returns (uint256) {\\n        require(percentage > 0, \\\"Percentage must be greater than 0\\\");\\n        // Convert the percentage to basis points (1% = 1000 basis points)\\n        uint256 basisPoints = uint256(percentage) * 1000;\\n        return basisPoints;\\n    }\\n\\n    function initializeTaxSettings(uint16 _txnTaxRate, address _txnTaxWallet)\\n        internal\\n    {\\n        require(_txnTaxWallet \!= address(0), \\\"TxnTax Wallet can'\''t be empty\\\");\\n        require(_txnTaxRate > 0, \\\"Transaction rate must be grater than 0\\\");\\n        txnTaxWallet = _txnTaxWallet;\\n        txnTaxRateBasisPoints = _txnTaxRate;\\n    }\\n\\n    function withdrawAll() external {\\n        StakeInfo[] memory tempStakes = isEligible(msg.sender);\\n        require(tempStakes.length > 0, \\\"No stakes to withdraw\\\");\\n\\n        for (uint256 i = 0; i < tempStakes.length; ) {\\n            unStakeById(tempStakes[i].id);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function isEligible(address _staker)\\n        public\\n        view\\n        returns (StakeInfo[] memory eligibleStakes)\\n    {\\n        uint256 stakeCount = nextStakeId[_staker];\\n        uint256 index = 0;\\n\\n        // Create a temporary array with a size equal to the total stake count\\n        StakeInfo[] memory tempStakes = new StakeInfo[](stakeCount);\\n\\n        for (uint256 i = 0; i < stakeCount; ) {\\n            StakeInfo memory _stake = userStakes[_staker][i];\\n            if (\\n                block.timestamp >= _stake.lockUntil &&\\n                \!_stake.isRewarded &&\\n                _stake.amount > 0\\n            ) {\\n                tempStakes[index] = _stake;\\n                index++;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // Create the final array with the exact size of eligible stakes\\n        eligibleStakes = new StakeInfo[](index);\\n        for (uint256 i = 0; i < index; ) {\\n            eligibleStakes[i] = tempStakes[i];\\n            unchecked {\\n                i++;\\n            } // Use unchecked to save gas\\n        }\\n    }\\n\\n    function initializeFeatures(smartContractActions memory _actions) private {\\n        actions.canStake = _actions.canStake;\\n        actions.canBurn = _actions.canBurn;\\n        actions.canMint = _actions.canMint;\\n        actions.canPause = _actions.canPause;\\n        actions.canBlacklist = _actions.canBlacklist;\\n        actions.canChangeOwner = _actions.canChangeOwner;\\n        actions.canTxTax = _actions.canTxTax;\\n        actions.canBuyBack = _actions.canBuyBack;\\n    }\\n\\n    function pauseTokenTransfers() public canPauseModifier onlyOwner {\\n        require(\!paused(), \\\"Contract is already paused.\\\");\\n        _pause();\\n    }\\n\\n    function unPauseTokenTransfers() public canPauseModifier onlyOwner {\\n        require(paused(), \\\"Contract is not paused.\\\");\\n        _unpause();\\n    }\\n\\n    function transferOwnership(address newOwner)\\n        public\\n        override\\n        canChangeOwnerModifier\\n        onlyOwner\\n    {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function convertDecimals(uint256 _amount) private view returns (uint256) {\\n        return _amount * 10**decimals();\\n    }\\n\\n    function transferToOwner(uint256 transferAmount) public onlyOwner {\\n        _transfer(address(this), msg.sender, transferAmount);\\n    }\\n\\n    function transferTokensToUser(\\n        address user,\\n        uint256 amount,\\n        uint256 lockDurationInMonths\\n    ) public onlyOwner whenNotPaused {\\n        require(\\n            balanceOf(address(this)) >= amount,\\n            \\\"Contract does not have enough tokens\\\"\\n        );\\n        require(\!blackListedAddress[user], \\\"User is blacklisted\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        _transfer(address(this), user, amount);\\n\\n        // Restrict tokens until the specified lock duration\\n        restrictedBalances[user] += amount;\\n        restrictedUntil[user] =\\n            block.timestamp +\\n            (lockDurationInMonths * 30 days);\\n    }\\n\\n    function transferUnrestrictedTokens(address user, uint256 amount)\\n        public\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        require(\\n            balanceOf(address(this)) >= amount,\\n            \\\"Contract does not have enough tokens\\\"\\n        );\\n        require(\!blackListedAddress[user], \\\"User is blacklisted\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        _transfer(address(this), user, amount);\\n    }\\n\\n    function burnExpiredTokens(address user) public {\\n        if (\\n            restrictedBalances[user] > 0 &&\\n            block.timestamp > restrictedUntil[user]\\n        ) {\\n            uint256 amountToBurn = restrictedBalances[user];\\n            restrictedBalances[user] = 0;\\n            _burn(user, amountToBurn);\\n        }\\n\\n        // Iterate through the conditional tokens array and burn expired tokens\\n        ConditionalTokens[] storage userTokens = conditionalTokens[user];\\n        uint256 length = userTokens.length;\\n\\n        for (uint256 i = 0; i < length; ) {\\n            if (\\n                block.timestamp > userTokens[i]._burningTime &&\\n                \!userTokens[i]._isBurnt\\n            ) {\\n                uint256 amountToBurn = userTokens[i]._amt;\\n                userTokens[i]._amt = 0;\\n                frozenTokens[user] -= amountToBurn;\\n                userTokens[i]._isBurnt = true;\\n                _burn(user, amountToBurn);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        // Burn expired restricted tokens before allowing transfer\\n        burnExpiredTokens(msg.sender);\\n\\n        uint256 actualBal = balanceOf(msg.sender) - frozenTokens[msg.sender];\\n        // Calculate unrestricted balance\\n        uint256 unrestrictedBalance = actualBal -\\n            restrictedBalances[msg.sender];\\n\\n        require(\\n            amount <= unrestrictedBalance,\\n            \\\"Transfer exceeds unrestricted token balance\\\"\\n        );\\n\\n        if (actions.canTxTax) {\\n            uint256 taxAmount = (amount * txnTaxRateBasisPoints) / (100 * 1000);\\n            uint256 netAmount = amount - taxAmount;\\n\\n            // Transfer tax to tax wallet\\n            super.transfer(txnTaxWallet, taxAmount);\\n            // Transfer remaining tokens to the recipient\\n            return super.transfer(recipient, netAmount);\\n        } else {\\n            return super.transfer(recipient, amount);\\n        }\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        // Burn expired restricted tokens before allowing transfer\\n        burnExpiredTokens(sender);\\n\\n        // Calculate unrestricted balance\\n        uint256 unrestrictedBalance = balanceOf(sender) -\\n            restrictedBalances[sender];\\n\\n        require(\\n            amount <= unrestrictedBalance,\\n            \\\"Transfer exceeds unrestricted token balance\\\"\\n        );\\n\\n        if (actions.canTxTax) {\\n            uint256 taxAmount = (amount * txnTaxRateBasisPoints) / (100 * 1000);\\n            uint256 netAmount = amount - taxAmount;\\n\\n            // Transfer tax to tax wallet\\n            super.transferFrom(sender, txnTaxWallet, taxAmount);\\n            // Transfer remaining tokens to the recipient\\n            return super.transferFrom(sender, recipient, netAmount);\\n        } else {\\n            return super.transferFrom(sender, recipient, amount);\\n        }\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool burn\\n    ) public returns (bool) {\\n        // Burn expired restricted tokens before allowing transfer\\n        if (burn) {\\n            burnExpiredTokens(sender);\\n        }\\n\\n        // Calculate unrestricted balance\\n        uint256 unrestrictedBalance = balanceOf(sender) -\\n            restrictedBalances[sender];\\n\\n        require(\\n            amount <= unrestrictedBalance,\\n            \\\"Transfer exceeds unrestricted token balance\\\"\\n        );\\n\\n        if (actions.canTxTax) {\\n            uint256 taxAmount = (amount * txnTaxRateBasisPoints) / (100 * 1000);\\n            uint256 netAmount = amount - taxAmount;\\n\\n            // Transfer tax to tax wallet\\n            super.transferFrom(sender, txnTaxWallet, taxAmount);\\n            // Transfer remaining tokens to the recipient\\n            return super.transferFrom(sender, recipient, netAmount);\\n        } else {\\n            return super.transferFrom(sender, recipient, amount);\\n        }\\n    }\\n\\n    function whiteListUser(address _user)\\n        public\\n        canBlacklistModifier\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        require(blackListedAddress[_user], \\\"User Address is not blacklisted\\\");\\n        blackListedAddress[_user] = false;\\n    }\\n\\n    function setTxnTaxRateBasisPoints(uint8 _rateValue)\\n        public\\n        canTxTaxModifier\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        require(_rateValue > 0, \\\"Rate must be grater than 0\\\");\\n        txnTaxRateBasisPoints = _rateValue;\\n    }\\n\\n    function setTxnTaxWallet(address _txnTaxWallet)\\n        public\\n        canTxTaxModifier\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        require(_txnTaxWallet \!= address(0), \\\"Txn tax wallet can'\''t be empty\\\");\\n        txnTaxWallet = _txnTaxWallet;\\n    }\\n\\n    function mintSupply(uint256 _amount)\\n        public\\n        canMintModifier\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        require(_amount > 0, \\\"Mint more than Zero\\\");\\n        _mint(address(this), convertDecimals(_amount));\\n    }\\n\\n    function blackListUsers(address[] calldata _users)\\n        public\\n        canBlacklistModifier\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            require(\\n                \!blackListedAddress[_users[i]],\\n                \\\"User Address is already blacklisted\\\"\\n            );\\n            blackListedAddress[_users[i]] = true;\\n        }\\n    }\\n\\n    function whiteListUsers(address[] calldata _users)\\n        public\\n        canBlacklistModifier\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            require(\\n                blackListedAddress[_users[i]],\\n                \\\"User Address is not blacklisted\\\"\\n            );\\n            blackListedAddress[_users[i]] = false;\\n        }\\n    }\\n\\n    function burnSupply(uint256 _amount)\\n        public\\n        canBurnModifier\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        require(_amount > 0, \\\"Burn more than Zero\\\");\\n        _burn(address(this), convertDecimals(_amount));\\n    }\\n\\n    function stake(uint256 _amount, uint256 _lockDuration)\\n        external\\n        canStakeModifier\\n        nonReentrant\\n        whenNotPaused\\n        isBlackListed\\n    {\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n        require(\\n            _lockDuration >= 1 && _lockDuration <= 24,\\n            \\\"Lock period must be between 1 and 24 months\\\"\\n        );\\n        uint256 stakeId = nextStakeId[msg.sender];\\n        nextStakeId[msg.sender]++;\\n        userStakes[msg.sender][stakeId] = StakeInfo({\\n            id: stakeId,\\n            amount: _amount,\\n            startTime: block.timestamp,\\n            lockUntil: block.timestamp + (_lockDuration * 30 days), // add 30 days\\n            isActive: true,\\n            isRewarded: false\\n        });\\n\\n        _transfer(msg.sender, address(this), _amount);\\n        emit TokensStaked(\\n            msg.sender,\\n            stakeId,\\n            _amount,\\n            block.timestamp,\\n            block.timestamp + (_lockDuration * 30 days)\\n        );\\n    }\\n\\n    function unStakeById(uint256 _stakeId)\\n        public\\n        canStakeModifier\\n        nonReentrant\\n        whenNotPaused\\n        isBlackListed\\n    {\\n        require(_stakeId < nextStakeId[msg.sender], \\\"Invalid stake ID\\\");\\n\\n        StakeInfo storage userStake = userStakes[msg.sender][_stakeId];\\n\\n        require(\!userStake.isRewarded, \\\"Stake has already been rewarded\\\");\\n        require(userStake.amount > 0, \\\"No staked amount available to unstake\\\");\\n        require(\\n            block.timestamp >= userStake.lockUntil,\\n            \\\"Stake is still locked\\\"\\n        );\\n\\n        uint256 unstakeAmount = userStake.amount;\\n        uint256 rewardAmt = stakeRewardCal(\\n            userStake.amount,\\n            userStake.startTime,\\n            block.timestamp\\n        );\\n\\n        // Mark as rewarded and inactive\\n        userStake.isActive = false;\\n        userStake.isRewarded = true;\\n\\n        // Transfer tokens back to the user\\n        _transfer(address(this), msg.sender, unstakeAmount + rewardAmt);\\n    }\\n\\n    function unstake(uint256 _amount)\\n        external\\n        canStakeModifier\\n        nonReentrant\\n        whenNotPaused\\n        isBlackListed\\n    {\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n        uint256 remainingAmountToUnstake = _amount;\\n        uint256 totalUnstakedAmount = 0;\\n        uint256 stakeCount = nextStakeId[msg.sender];\\n\\n        for (uint256 i = stakeCount; i > 0; i--) {\\n            StakeInfo storage userStake = userStakes[msg.sender][i - 1];\\n\\n            // Only consider active and unrewarded stakes\\n            if (\!userStake.isRewarded) {\\n                if (userStake.amount <= remainingAmountToUnstake) {\\n                    remainingAmountToUnstake -= userStake.amount;\\n                    totalUnstakedAmount += userStake.amount;\\n                    userStake.amount = 0;\\n                    userStake.isActive = false;\\n                } else {\\n                    totalUnstakedAmount += remainingAmountToUnstake;\\n                    userStake.amount -= remainingAmountToUnstake;\\n                    remainingAmountToUnstake = 0;\\n                }\\n\\n                // Exit loop if the required amount is fully unstaked\\n                if (remainingAmountToUnstake == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        require(\\n            totalUnstakedAmount == _amount,\\n            \\\"Not enough staked balance to unstake the requested amount\\\"\\n        );\\n\\n        // Transfer tokens back to the user\\n        _transfer(address(this), msg.sender, totalUnstakedAmount);\\n\\n        // emit TokensUnstaked(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function burnFrom(address _user, uint256 _amount) public onlyOwner {\\n        uint256 currentAllowance = allowance(_user, owner()); //100\\n        require(currentAllowance >= _amount, \\\"Burn amount exceeds allowance\\\");\\n        uint256 userBalance = balanceOf(_user);\\n        if (userBalance == 0) {\\n            _approve(_user, owner(), 0);\\n        }\\n        _burn(_user, _amount);\\n    }\\n\\n    function getRewardRates() public view returns (TokenRewardRate[] memory) {\\n        return rewardRates;\\n    }\\n\\n    function stakeRewardCal(\\n        uint256 _amt,\\n        uint256 _start,\\n        uint256 _end\\n    ) public view returns (uint256) {\\n        uint256 stakedDuration = (_end - _start) / 30 days; // divide 30 days\\n        require(stakedDuration > 0, \\\"Staked duration must be at least 1 month\\\");\\n\\n        uint256 reward = 0;\\n\\n        for (uint256 i = 0; i < rewardRates.length; i++) {\\n            if (stakedDuration >= rewardRates[i].months) {\\n                reward = (_amt * rewardRates[i].rewardRate) / 100;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n    function allStakes(address _user) public view returns (StakeInfo[] memory) {\\n        uint256 length = nextStakeId[_user];\\n        uint256 activeCount = 0;\\n\\n        // First, count the active stakes to size the array correctly\\n        for (uint256 i = 0; i < length; i++) {\\n            if (userStakes[_user][i].isActive) {\\n                activeCount++;\\n            }\\n        }\\n\\n        StakeInfo[] memory tempStakes = new StakeInfo[](activeCount);\\n        uint256 index = 0;\\n\\n        // Populate the tempStakes array with active stakes\\n        for (uint256 i = 0; i < length; i++) {\\n            if (userStakes[_user][i].isActive) {\\n                tempStakes[index] = userStakes[_user][i];\\n                index++;\\n            }\\n        }\\n\\n        return tempStakes;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from \`ReentrancyGuard\` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single \`nonReentrant\` guard, functions marked as\\n * \`nonReentrant\` may not call one another. This can be worked around by making\\n * those functions \`private\`, and then adding \`external\` \`nonReentrant\` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot'\''s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler'\''s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction'\''s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a \`nonReentrant\` function from another \`nonReentrant\`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the \`nonReentrant\` function external, and making it call a\\n     * \`private\` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * \`nonReentrant\` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers \`whenNotPaused\` and \`whenPaused\`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by \`account\`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by \`account\`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (\!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * \`onlyOwner\`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. \`address(0)\`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() \!= _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * \`onlyOwner\` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (\`newOwner\`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (\`newOwner\`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning \`false\` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn'\''t required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if \`decimals\` equals \`2\`, a balance of \`505\` tokens should\\n     * be displayed to a user as \`5.05\` (\`505 / 10 ** 2\`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it'\''s overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - \`to\` cannot be the zero address.\\n     * - the caller must have a balance of at least \`value\`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If \`value\` is the maximum \`uint256\`, the allowance is not updated on\\n     * \`transferFrom\`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - \`spender\` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum \`uint256\`.\\n     *\\n     * Requirements:\\n     *\\n     * - \`from\` and \`to\` cannot be the zero address.\\n     * - \`from\` must have a balance of at least \`value\`.\\n     * - the caller must have allowance for \`\`from\`\`'\''s tokens of at least\\n     * \`value\`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a \`value\` amount of tokens from \`from\` to \`to\`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a \`value\` amount of tokens from \`from\` to \`to\`, or alternatively mints (or burns) if \`from\`\\n     * (or \`to\`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a \`value\` amount of tokens and assigns them to \`account\`, by transferring it from address(0).\\n     * Relies on the \`_update\` mechanism\\n     *\\n     * Emits a {Transfer} event with \`from\` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a \`value\` amount of tokens from \`account\`, lowering the total supply.\\n     * Relies on the \`_update\` mechanism.\\n     *\\n     * Emits a {Transfer} event with \`to\` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets \`value\` as the allowance of \`spender\` over the \`owner\` s tokens.\\n     *\\n     * This internal function is equivalent to \`approve\`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - \`owner\` cannot be the zero address.\\n     * - \`spender\` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional \`bool emitEvent\` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * \`_spendAllowance\` during the \`transferFrom\` operation set the flag to false. This saves gas by not emitting any\\n     * \`Approval\` event during \`transferFrom\` operations.\\n     *\\n     * Anyone who wishes to continue emitting \`Approval\` events on the\`transferFrom\` operation can force the flag to\\n     * true using the following override:\\n     * \`\`\`\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * \`\`\`\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates \`owner\` s allowance for \`spender\` based on spent \`value\`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance \!= type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current \`balance\` of a \`sender\`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token \`sender\`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token \`receiver\`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the \`spender\`’s \`allowance\`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a \`spender\` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the \`approver\` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the \`spender\` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can'\''t be an owner. For example, \`address(0)\` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a \`tokenId\` whose \`owner\` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token \`sender\`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token \`receiver\`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the \`operator\`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the \`approver\` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the \`operator\` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current \`balance\` of a \`sender\`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token \`sender\`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token \`receiver\`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the \`operator\`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the \`approver\` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the \`operator\` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when \`value\` tokens are moved from one account (\`from\`) to\\n     * another (\`to\`).\\n     *\\n     * Note that \`value\` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a \`spender\` for an \`owner\` is set by\\n     * a call to {approve}. \`value\` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by \`account\`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a \`value\` amount of tokens from the caller'\''s account to \`to\`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that \`spender\` will be\\n     * allowed to spend on behalf of \`owner\` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a \`value\` amount of tokens as the allowance of \`spender\` over the\\n     * caller'\''s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender'\''s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20\#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a \`value\` amount of tokens from \`from\` to \`to\` using the\\n     * allowance mechanism. \`value\` is then deducted from the caller'\''s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":true,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[]}}"' \
--form 'constructorArguments="000000000000000000000000000000000000000c9f2c9cd04674edea400000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000010c01177b6f7dc0c31ede50aa38a91b74ce0fc01177b6f7dc0c31ede50aa38a91b74ce0f0810000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000074d79546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d544b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000023"' \
--form 'contractaddress="0x571423A8A906BeA68C29cA981363C3FdBF5D8D6f"' \
--form 'contractname="contracts/Verified.sol:Verified"' \
--form 'compilerversion="v0.8.28+commit.7893614a"' \
--form 'optimizationUsed="1"'
